{"version":3,"sources":["components/Wrapper/index.js","components/Container.js","components/Row.js","utils/API.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Container","fluid","Row","API","getUsers","axios","get","Table","useState","employees","setEmployeesState","filteredEmployees","setFilteredEmployeesState","value","setValue","useEffect","then","data","console","log","results","onChange","e","target","onClick","filtered","filter","employee","name","first","startsWith","last","striped","bordered","hover","map","result","i","email","phone","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0NASeA,MANf,SAAiBC,GACf,OACE,qBAAKC,UAAU,UAAf,SAA0BD,EAAME,YCCrBC,MAJf,SAAmBH,GACjB,OAAO,qBAAKC,UAAS,mBAAcD,EAAMI,MAAQ,SAAW,IAArD,SAA4DJ,EAAME,Y,OCiB5DG,I,iBCZAC,EANH,CACVC,SAAU,WACR,OAAOC,IAAMC,IAAI,mDCGN,SAASC,IAAU,IAAD,EAEUC,mBAAS,IAFnB,mBAEtBC,EAFsB,KAEXC,EAFW,OAG0BF,mBAAS,IAHnC,mBAGtBG,EAHsB,KAGHC,EAHG,OAIHJ,mBAAS,IAJN,mBAItBK,EAJsB,KAIfC,EAJe,KAM7BC,qBAAU,WACNZ,EAAIC,WAAWY,MAAK,SAAAC,GAChBC,QAAQC,IAAIF,GACXP,EAAkBO,EAAKA,KAAKG,SAC5BR,EAA0BK,EAAKA,KAAKG,cAG3C,IAQF,OACI,gCACI,uBAAOP,MAAOA,EAAOQ,SAAU,SAACC,GAAD,OAAKR,EAASQ,EAAEC,OAAOV,UAD1D,IACoE,wBAAQW,QAP3D,WACjB,IAAMC,EAAWhB,EAAUiB,QAAO,SAACC,GAAD,OAAcA,EAASC,KAAKC,MAAMC,WAAWjB,IAAUc,EAASC,KAAKG,KAAKD,WAAWjB,MACvHD,EAA0Ba,IAK0C,qBAEhE,eAAClB,EAAD,CAAOyB,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACV,gCACE,+BACE,mCACA,4CACA,2CACA,uCACA,4CAGJ,gCACWvB,EAAkBwB,KAAI,SAACC,EAAOC,GAC3B,OACA,+BACA,6BAAKA,IACL,6BAAKD,EAAOR,KAAKC,QACjB,6BAAKO,EAAOR,KAAKG,OACjB,6BAAKK,EAAOE,QACZ,6BAAKF,EAAOG,UALHF,c,YCxBVG,MAZf,WACE,OACE,qBAAK1C,UAAU,MAAf,SACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAACS,EAAD,WCLUkC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD+GzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.6dc82c63.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return (\r\n    <div className=\"wrapper\">{props.children}</div>\r\n  );\r\n}\r\n\r\nexport default Wrapper;\r\n\r\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\n// style row and sort \n\nfunction Row(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"mr-3\">\n        Profile: <img src={props.image} alt=\"firstname\"/>\n      </div>\n      <div>\n        First Name: {props.firstName}\n      </div>\n      <div>\n        Last Name: {props.lastName}\n      </div>\n    </div>\n    \n  );\n}\n\nexport default Row;\n","import axios from \"axios\";\r\n\r\nconst API = {\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n}\r\n\r\nexport default API;\r\n\r\n","import React, {useState, useEffect} from \"react\";\r\nimport Row from \"./Row\";\r\nimport API from \"../utils/API\";\r\n\r\n\r\n\r\n\r\nexport default function Table () {\r\n\r\n    const [employees, setEmployeesState] = useState([]);\r\n    const [filteredEmployees, setFilteredEmployeesState] = useState([]);\r\n    const [value, setValue] = useState(\"\")\r\n\r\n    useEffect(()=> {\r\n        API.getUsers().then(data =>  {\r\n            console.log(data)\r\n             setEmployeesState(data.data.results);\r\n             setFilteredEmployeesState(data.data.results);\r\n            }  \r\n        )\r\n    },[])\r\n    // onclick methods \r\n\r\n    const handleSearch = ()=>{\r\n        const filtered = employees.filter((employee) => employee.name.first.startsWith(value) || employee.name.last.startsWith(value))\r\n        setFilteredEmployeesState(filtered)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={value} onChange={(e)=>setValue(e.target.value)}/> <button onClick={handleSearch}> search</button>\r\n            {/* header row here */}\r\n            <Table striped bordered hover>\r\n  <thead>\r\n    <tr>\r\n      <th>#</th>\r\n      <th>First Name</th>\r\n      <th>Last Name</th>\r\n      <th>Email</th>\r\n      <th>Phone</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n            {filteredEmployees.map((result,i ) => {\r\n                return(\r\n                <tr key={i}>\r\n                <td>{i}</td>\r\n                <td>{result.name.first}</td>\r\n                <td>{result.name.last}</td>\r\n                <td>{result.email}</td>\r\n                <td>{result.phone}</td>\r\n                </tr>)\r\n                // //return <Row image={result.picture.medium} firstName={result.name.first} lastName={result.name.last}/>\r\n            })}\r\n   \r\n  </tbody>\r\n</Table>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\n\nimport Wrapper from \"./components/Wrapper/index\";\nimport Container from \"./components/Container\";\nimport Table from \"./components/Table\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Container>\n          <Table />\n        </Container>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}